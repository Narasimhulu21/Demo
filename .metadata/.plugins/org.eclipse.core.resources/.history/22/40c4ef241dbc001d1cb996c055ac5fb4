package LFDT;

import java.util.HashMap;
import java.io.File;
import java.io.IOException;
import java.time.Instant;

import org.junit.Assert;
import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeOptions;

import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.utils.FileUtil;
import com.gargoylesoftware.htmlunit.javascript.host.Set;
//import com.gargoylesoftware.htmlunit.javascript.host.file.File;

import FrameworkCode.BFrameworkQueryObjects;


public class DownloadFile {
	
	
	public static boolean isFileDownloaded(String expectedFileName, String fileExtension, int timeOut) {
	    // Download Folder Path
	    String folderName = System.getProperty("user.dir") + File.separator + "downloads";
			
	    // Array to Store List of Files in Directory
	    File[] listOfFiles;
			
	    // Store File Name
	    String fileName;   
	        
	    //  Consider file is not downloaded
	    boolean fileDownloaded = false;      
	        
	    // capture time before looking for files in directory
	    // last modified time of previous files will always less than start time
	    // this is basically to ignore previous downloaded files
	    long startTime = Instant.now().toEpochMilli();
	        
	    // Time to wait for download to finish
	    long waitTime = startTime + timeOut;
	       
	    // while current time is less than wait time
	    while (Instant.now().toEpochMilli() < waitTime) 
	    {			
	        // get all the files of the folder
	        listOfFiles = new File(folderName).listFiles();
	            
	        // iterate through each file
	        for (File file : listOfFiles) 
	        {
	            // get the name of the current file
	            fileName = file.getName().toLowerCase();
	        		
	            // condition 1 - Last Modified Time > Start Time
	            // condition 2 - till the time file is completely downloaded extension will be crdownload
	            // Condition 3 - Current File name contains expected Text
	            // Condition 4 - Current File name contains expected extension
	            if (file.lastModified() > startTime && !fileName.contains("crdownload") &&   fileName.contains(expectedFileName.toLowerCase()) && fileName.contains(fileExtension.toLowerCase())) 
	           {
	               // File Found
	               fileDownloaded = true;
	               break;
	           }
	        }
	        // File Found Break While Loop
	         if (fileDownloaded) 
	             break;
	    }
	    // File Not Found
	    return fileDownloaded;
	}
	@Test
public void fileDownload(WebDriver driver, BFrameworkQueryObjects queryObjects) throws InterruptedException, IOException
	{
		String Desc1 = queryObjects.getTestData("Description");
		
		driver.findElement(By.xpath("//input[@placeholder='Description' and @type='text']")).sendKeys(Desc1);
		queryObjects.logStatus(driver, Status.PASS, "Description Data entered successfully","Fliter Description", null);
		Thread.sleep(3000);
		driver.findElement(By.xpath("//span[@class='MuiButton-startIcon MuiButton-iconSizeMedium css-6xugel']")).click();
		Thread.sleep(6000);
		driver.findElement(By.xpath("//p[@class='text-short']")).click();
		queryObjects.logStatus(driver, Status.PASS, "Click On Report ", "Report", null);

		Thread.sleep(6000);
			String parentHandle = driver.getWindowHandle();
			driver.findElement(By.xpath("//button[text()='Attachment']")).click();
			queryObjects.logStatus(driver, Status.PASS, "Click On Attachment ", "Attachment", null);
		
			Thread.sleep(3000);
			driver.findElement(By.xpath("//div[@class ='MuiBox-root css-ck0lxi'][1]/div/table/tbody/tr/td[6]/button")).click();
	   
			Assert.assertTrue(isFileDownloaded("sample", "csv", 5000));
			driver.close();
	}

}

